/**
 * EvaluacionPeriodoController
 * 
 * Controller for managing evaluation periods with Observer pattern.
 */

import { EstadoEvaluacionPeriodo, EvaluacionPeriodo } from '../../domain/entities/EvaluacionPeriodo';
import { IEvaluacionPeriodoRepository } from '../../domain/repositories/EvaluacionPeriodoRepository';

type Observer = () => void;

export class EvaluacionPeriodoController {
  private repository: IEvaluacionPeriodoRepository;
  private observers: Observer[] = [];

  // State
  private _isLoading: boolean = false;
  private _evaluacionesPorActividad: Map<string, EvaluacionPeriodo[]> = new Map();
  private _evaluacionesPorProfesor: Map<string, EvaluacionPeriodo[]> = new Map();
  private _evaluacionesActivas: EvaluacionPeriodo[] = [];
  private _evaluacionActual: EvaluacionPeriodo | null = null;

  constructor(repository: IEvaluacionPeriodoRepository) {
    this.repository = repository;
  }

  // Observer pattern
  subscribe(observer: Observer): () => void {
    this.observers.push(observer);
    return () => {
      this.observers = this.observers.filter((obs) => obs !== observer);
    };
  }

  private notify(): void {
    this.observers.forEach((observer) => observer());
  }

  // Getters
  get isLoading(): boolean {
    return this._isLoading;
  }

  get evaluacionesPorActividad(): Map<string, EvaluacionPeriodo[]> {
    return this._evaluacionesPorActividad;
  }

  get evaluacionesPorProfesor(): Map<string, EvaluacionPeriodo[]> {
    return this._evaluacionesPorProfesor;
  }

  get evaluacionesActivas(): EvaluacionPeriodo[] {
    return this._evaluacionesActivas;
  }

  get evaluacionActual(): EvaluacionPeriodo | null {
    return this._evaluacionActual;
  }

  // Methods
  async cargarEvaluacionesPorActividad(actividadId: string): Promise<void> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluaciones = await this.repository.getEvaluacionesPorActividad(actividadId);
      this._evaluacionesPorActividad.set(actividadId, evaluaciones);
    } catch (e) {
      console.error('❌ Error cargando evaluaciones:', e);
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async cargarEvaluacionesPorProfesor(profesorId: string): Promise<void> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluaciones = await this.repository.getEvaluacionesPorProfesor(profesorId);
      this._evaluacionesPorProfesor.set(profesorId, evaluaciones);
    } catch (e) {
      console.error('Error cargando evaluaciones del profesor:', e);
      throw e;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async cargarEvaluacionesActivas(): Promise<void> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluaciones = await this.repository.getEvaluacionesActivas();
      this._evaluacionesActivas = evaluaciones;
    } catch (e) {
      console.error('Error cargando evaluaciones activas:', e);
      throw e;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async cargarEvaluacionPorId(id: string): Promise<void> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluacion = await this.repository.getEvaluacionPeriodoById(id);
      this._evaluacionActual = evaluacion;
    } catch (e) {
      console.error('Error cargando evaluación:', e);
      throw e;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async crearEvaluacionPeriodo(params: {
    actividadId: string;
    titulo: string;
    descripcion?: string;
    fechaInicio: Date;
    fechaFin?: Date;
    profesorId: string;
    evaluacionEntrePares?: boolean;
    permitirAutoEvaluacion?: boolean;
    criteriosEvaluacion: string[];
    habilitarComentarios?: boolean;
    puntuacionMaxima?: number;
  }): Promise<boolean> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluacion = new EvaluacionPeriodo({
        id: '', // Will be generated by repository
        actividadId: params.actividadId,
        titulo: params.titulo,
        descripcion: params.descripcion,
        fechaInicio: params.fechaInicio,
        fechaFin: params.fechaFin,
        fechaCreacion: new Date(),
        profesorId: params.profesorId,
        evaluacionEntrePares: params.evaluacionEntrePares ?? true,
        permitirAutoEvaluacion: params.permitirAutoEvaluacion ?? false,
        criteriosEvaluacion: params.criteriosEvaluacion,
        estado: EstadoEvaluacionPeriodo.PENDIENTE,
        habilitarComentarios: params.habilitarComentarios ?? true,
        puntuacionMaxima: params.puntuacionMaxima ?? 5.0,
      });

      const createdEvaluacion = await this.repository.crearEvaluacionPeriodo(evaluacion);
      this._evaluacionActual = createdEvaluacion;

      // Update local lists
      await this.cargarEvaluacionesPorActividad(params.actividadId);
      await this.cargarEvaluacionesPorProfesor(params.profesorId);

      return true;
    } catch (e) {
      console.error('Error creando evaluación:', e);
      return false;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async activarEvaluacion(id: string): Promise<boolean> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluacion = await this.repository.getEvaluacionPeriodoById(id);
      if (!evaluacion) {
        throw new Error('Evaluación no encontrada');
      }

      const evaluacionActivada = evaluacion.copyWith({
        estado: EstadoEvaluacionPeriodo.ACTIVO,
        fechaActualizacion: new Date(),
      });

      const updated = await this.repository.actualizarEvaluacionPeriodo(evaluacionActivada);
      this._evaluacionActual = updated;

      // Update lists
      await this.cargarEvaluacionesActivas();

      return true;
    } catch (e) {
      console.error('Error activando evaluación:', e);
      return false;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async finalizarEvaluacion(id: string): Promise<boolean> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluacion = await this.repository.getEvaluacionPeriodoById(id);
      if (!evaluacion) {
        throw new Error('Evaluación no encontrada');
      }

      const evaluacionFinalizada = evaluacion.copyWith({
        estado: EstadoEvaluacionPeriodo.FINALIZADO,
        fechaActualizacion: new Date(),
      });

      const updated = await this.repository.actualizarEvaluacionPeriodo(evaluacionFinalizada);
      this._evaluacionActual = updated;

      // Update lists
      await this.cargarEvaluacionesActivas();

      return true;
    } catch (e) {
      console.error('Error finalizando evaluación:', e);
      return false;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async actualizarEvaluacion(evaluacion: EvaluacionPeriodo): Promise<boolean> {
    try {
      this._isLoading = true;
      this.notify();

      const updated = await this.repository.actualizarEvaluacionPeriodo(evaluacion);
      this._evaluacionActual = updated;

      // Update local lists
      await this.cargarEvaluacionesPorActividad(evaluacion.actividadId);
      await this.cargarEvaluacionesPorProfesor(evaluacion.profesorId);

      return true;
    } catch (e) {
      console.error('Error actualizando evaluación:', e);
      return false;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async eliminarEvaluacion(id: string): Promise<boolean> {
    try {
      this._isLoading = true;
      this.notify();

      const result = await this.repository.eliminarEvaluacionPeriodo(id);
      if (result && this._evaluacionActual?.id === id) {
        this._evaluacionActual = null;
      }

      return result;
    } catch (e) {
      console.error('Error eliminando evaluación:', e);
      return false;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  async cargarEvaluacionesPorEstado(estado: EstadoEvaluacionPeriodo): Promise<void> {
    try {
      this._isLoading = true;
      this.notify();

      const evaluaciones = await this.repository.getEvaluacionesPorEstado(estado);
      // Store in a temporary variable for filtering
      this._evaluacionesActivas = evaluaciones;
    } catch (e) {
      console.error('Error cargando evaluaciones por estado:', e);
      throw e;
    } finally {
      this._isLoading = false;
      this.notify();
    }
  }

  // Utility methods
  limpiarEvaluacionActual(): void {
    this._evaluacionActual = null;
    this.notify();
  }
}

export default EvaluacionPeriodoController;
